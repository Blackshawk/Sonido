#!/usr/bin/env php
<?php

$files = array(
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
);

foreach ($files as $file) {
    if (file_exists($file)) {
        require_once $file;
        break;
    }
}

if (!class_exists('Composer\Autoload\ClassLoader', false)) {
    die(
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}

class TestJob
{
    public function perform()
    {
        fwrite(STDOUT, 'Yo' . PHP_EOL);
    }
}

$sonido = new Sonido\Sonido(array(
    'server'   => getenv('REDIS_BACKEND'),
    'database' => getenv('REDIS_BACKEND_DB'),
));

$APP_INCLUDE = getenv('APP_INCLUDE');
if ($APP_INCLUDE) {
    if (!file_exists($APP_INCLUDE)) {
        die("APP_INCLUDE (" . $APP_INCLUDE . ") does not exist.\n");
    }

    require_once $APP_INCLUDE;
}

$jobStrategy = getenv('JOB_STRATEGY');
switch($jobStrategy) {
    case 'inprocess':
    default:
        $jobStrategy = new Sonido\Job\Strategy\InProcess;
        break;
    case 'fork':
        $jobStrategy = new Sonido\Job\Strategy\Fork;
        break;
    case 'batchfork':
        $jobStrategy = new Sonido\Job\Strategy\BatchFork(getenv('PER_CHILD') ?: 1);
        break;
    case 'fastcgi':
        $fastcgiLocation = getenv('FASTCGI_LOCATION') ?: '127.0.0.1:9000';
        $fastcgiScript = getenv('FASTCGI_SCRIPT') ?: dirname(__FILE__) . '/extras/fastcgi_worker.php';

        require_once dirname(__FILE__).'/lib/Sonido/JobStrategy/Fastcgi.php';
        $jobStrategy = new Sonido\Job\Strategy\Fastcgi(
            $fastcgiLocation,
            $fastcgiScript,
            array(
                'APP_INCLUDE'   => $APP_INCLUDE,
                'REDIS_BACKEND' => $REDIS_BACKEND,
            )
        );
        break;
}

$logLevel = getenv('LOGLEVEL') ?: 'info';
$interval = getenv('INTERVAL') ?: 5;
$queue = getenv('QUEUE') ?: '*';
$queues = explode(',', $queue);
$count = getenv('COUNT') ?: 1;
$daemonize = getenv('DAEMONIZE') ?: false;

$platform = new Sonido\Platform;

function startWorker($sonido, $queues, $jobStrategy, $interval, $daemonize)
{
    $worker = $sonido->get('worker.daemon');
    $worker->setQueues($queues);

    if ($jobStrategy) {
        $worker->setJobStrategy($jobStrategy);
    }

    fwrite(STDOUT, "*** Starting worker (queues: " . implode(',', $queues) . ", interval: " . $interval . ")\n");
    $worker->setInterval($interval);

    if ($daemonize) {
        $worker->daemonize();
    } else {
        $worker->work();
    }
}

if ($count > 1) {
    for($i = 0; $i < $count; ++$i) {
        $pid = $platform->fork();

        if ($pid == -1) {
            die("Could not fork worker " . $i . "\n");
        } else if (!$pid) {
            startWorker($sonido, $queues, $jobStrategy, $interval, $daemonize);

            break;
        }
    }
} else {
    startWorker($sonido, $queues, $jobStrategy, $interval, $daemonize);

    if ($pidfile = getenv('PIDFILE')) {
        file_put_contents($pidfile, getmypid()) or
            die('Could not write PID information to ' . $pidfile);
    }
}
?>
